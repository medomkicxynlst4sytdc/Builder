env: # Environment variables to pass to all tasks
    CIRRUS_CLONE_DEPTH: 1 # No need to clone with the whole history
    CIRRUS_WORKING_DIR: "/tmp/ci" # Where to clone the aosp-builder repo

    # For rclone with google drive or any cloud! After first commit pushing, login to https://cirrus-ci.com , click top left corner 3 dot menu, click repository(yourname/aosp-builder) > Repository Settings > Secured Variables > enter content of ~/.config/rclone/rclone.conf (from pc where you setup rclone) > ENCRYPT, copy that ENCRYPTED hash
    # ENCRYPTED variables is unique for every repository, so you cant use my one, create you rclone config https://rclone.org/drive/#making-your-own-client-id
    rclone_config: "ENCRYPTED[1f595820a20eadffb1c52a9d69cba4ccf6835f99144968eea858ece812c141016fc9aae47f11e55e03850a1f3ef25b16]"

task:
    name: aosp # Project name
    timeout_in: 120m # Otherwise it will timeout at 60m automatically, 120m highest in free account
    container:
      image: apon77/aosp:latest # It has built-in setup environment + repo, aria2, rclone, pigz, username ci, and email ci@ci.ci [You can use your own docker image if you want, or you can use this one too!]
      cpu: 8  #8 or less cpu for dummy build, 8 cpu for the final build, 8cpu highest for free accounts. Don't try to use more than 8cpu as free user, you may get blocked by ci.
      memory: 32G # So that we can have ram when needed, 32G highest
      volumes:
          - /home/cirrus/roms:/home/cirrus/roms
          - /home/cirrus/ccache:/home/cirrus/ccache
          - /home/cirrus/.config:/home/cirrus/.config
    download_ccache_background_script: # To download ccache in background
      - ./download_ccache # Ccache download script
    sync_script:
    - set -e
    - rom_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d / -f 4)
    - branch_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh | awk -F "-b " '{print $2}' | awk '{print $1}')
    - rom_name=$rom_name-$branch_name
    - mkdir -p ~/roms/$rom_name
    - cd ~/roms/$rom_name
    - rm -rf .repo/local_manifests
    - command=$(head $CIRRUS_WORKING_DIR/build_rom.sh -n $(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build_rom.sh -n | cut -f1 -d:) - 1))
    - only_sync=$(grep 'repo sync' $CIRRUS_WORKING_DIR/build_rom.sh)
    - bash -c "$command" || true
    
    - set -exv
    - curl -sO https://api.cirrus-ci.com/v1/task/$CIRRUS_TASK_ID/logs/sync.log
    - a=$(grep 'Cannot remove project' sync.log -m1|| true)
    - b=$(grep "^fatal: remove-project element specifies non-existent project" sync.log -m1 || true)
    - c=$(grep 'repo sync has finished' sync.log -m1 || true)
    - d=$(grep 'Failing repos:' sync.log -n -m1 || true)
    - e=$(grep 'fatal: Unable' sync.log || true)
    - f=$(grep 'error.GitError' sync.log || true)
    - g=$(grep 'error: Cannot checkout' sync.log || true)
    - if [[ $a == *'Cannot remove project'* ]]
    - then
    - a=$(echo $a | cut -d ':' -f2 | tr -d ' ')
    - rm -rf $a
    - fi
    - if [[ $b == *'remove-project element specifies non-existent'* ]]
    - then exit 1
    - fi
    - if [[ $d == *'Failing repos:'* ]]
    - then
    - d=$(expr $(grep 'Failing repos:' sync.log -n -m 1| cut -d ':' -f1) + 1)
    - d2=$(expr $(grep 'Try re-running' sync.log -n -m1 | cut -d ':' -f1) - 1 )
    - fail_paths=$(head -n $d2 sync.log | tail -n +$d)
    - for path in $fail_paths
    - do
    - rm -rf $path
    - aa=$(echo $path|awk -F '/' '{print $NF}')
    - rm -rf .repo/project-objects/*$aa.git
    - rm -rf .repo/projects/$path.git
    - done
    - fi
    - if [[ $e == *'fatal: Unable'* ]]
    - then
    - fail_paths=$(grep 'fatal: Unable' sync.log | cut -d ':' -f2 | cut -d "'" -f2)
    - for path in $fail_paths
    - do
    - rm -rf $path
    - aa=$(echo $path|awk -F '/' '{print $NF}')
    - rm -rf .repo/project-objects/*$aa.git
    - rm -rf .repo/project-objects/$path.git
    - rm -rf .repo/projects/$path.git
    - done
    - fi
    - if [[ $f == *'error.GitError'* ]]
    - then
    - rm -rf $(grep 'error.GitError' sync.log | cut -d ' ' -f2)
    - fi
    - if [[ $g == *'error: Cannot checkout'* ]]
    - then
    - coerr=$(grep 'error: Cannot checkout' sync.log | cut -d ' ' -f 4| tr -d ':')
    - for i in $coerr
    - do
    - rm -rf .repo/project-objects/$i.git
    - done
    - fi
    #- (repo forall -c 'git checkout .' && bash -c "$only_sync") || (find -name shallow.lock -delete && find -name index.lock -delete && bash -c "$only_sync")

    - if [[ $c == *'repo sync has finished'* ]]
    - then true
    - else
    - repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
    - fi

    - rm -rf sync.log 
    monitor_background_script: # To monitor ccache and machine status every minute, runs in background
      - ./monitor # Monitor script
    build_script:
    - set -e
    - rom_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d / -f 4)
    - branch_name=$(grep init $CIRRUS_WORKING_DIR/build_rom.sh | awk -F "-b " '{print $2}' | awk '{print $1}')
    - rom_name=$rom_name-$branch_name
    - device=$(grep unch $CIRRUS_WORKING_DIR/build_rom.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
    - grep _jasmine_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=jasmine_sprout
    - grep _laurel_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=laurel_sprout
    - grep _GM8_sprout $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=GM8_sprout
    - grep _maple_dsds $CIRRUS_WORKING_DIR/build_rom.sh > /dev/null && device=maple_dsds
    - cd ~/roms/$rom_name
    - export CCACHE_DIR=~/ccache/$rom_name/$device
    - export CCACHE_EXEC=$(which ccache)
    - export USE_CCACHE=1
    - ccache -M 8G
    - ccache -z
    - ls device/*/*/vendorsetup.sh | grep -v generic && echo "Please remove vendorsetup.sh file from device tree, use local manifest for cloning and removing repositories." && exit 1 || true
    - command=$(tail $CIRRUS_WORKING_DIR/build_rom.sh -n +$(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build_rom.sh -n | cut -f1 -d:) - 1)| head -n -1 | grep -v 'rclone copy')
    - bash -c "$command" 
    upload_ccache_script: # Upload ccache to cloud foreground
      - ./upload_ccache # Ccache uploading script
